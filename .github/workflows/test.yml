name: test
concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true
on:
    pull_request: { types: [opened, reopened, synchronize, ready_for_review] }
    push: { branches: [main] }

env:
    LOG_LEVEL: info
    SWIFT_DETERMINISTIC_HASHING: 1
jobs:
    test:
        services:
            ssh-server:
                image: lscr.io/linuxserver/openssh-server:latest
                ports:
                    - 2222:2222
                    - 2223:2223  # Additional port for certificate testing
                env:
                    USER_NAME: citadel
                    USER_PASSWORD: hunter2
                    PASSWORD_ACCESS: true
                    DOCKER_MODS: linuxserver/mods:openssh-server-ssh-tunnel
        runs-on: ubuntu-latest
        container: 
          image: swift:5.10-jammy
          env:
            SWIFT_DETERMINISTIC_HASHING: 1
        steps:
            - uses: actions/checkout@v4
            
            - name: Install SSH tools for certificate generation
              run: apt-get update && apt-get install -y openssh-client
            
            - name: Setup SSH certificates
              run: |
                # Generate CA key
                ssh-keygen -t ed25519 -f /tmp/ca_key -N "" -C "Test CA"
                
                # Generate test certificates for different key types
                mkdir -p test-certificates
                cd test-certificates
                
                # Ed25519
                ssh-keygen -t ed25519 -f user_ed25519 -N "" -C "test@example.com"
                ssh-keygen -s /tmp/ca_key -I test-user -n citadel -V +1h user_ed25519.pub
                
                # RSA
                ssh-keygen -t rsa -b 3072 -f user_rsa -N "" -C "test@example.com"
                ssh-keygen -s /tmp/ca_key -I test-user -n citadel -V +1h user_rsa.pub
                
                # ECDSA variants
                ssh-keygen -t ecdsa -b 256 -f user_ecdsa256 -N "" -C "test@example.com"
                ssh-keygen -s /tmp/ca_key -I test-user -n citadel -V +1h user_ecdsa256.pub
                
                ssh-keygen -t ecdsa -b 384 -f user_ecdsa384 -N "" -C "test@example.com"
                ssh-keygen -s /tmp/ca_key -I test-user -n citadel -V +1h user_ecdsa384.pub
                
                ssh-keygen -t ecdsa -b 521 -f user_ecdsa521 -N "" -C "test@example.com"
                ssh-keygen -s /tmp/ca_key -I test-user -n citadel -V +1h user_ecdsa521.pub
                
                # Configure SSH server to trust our CA
                docker cp /tmp/ca_key.pub ${{ job.services.ssh-server.id }}:/config/.ssh/ca_key.pub
                docker exec ${{ job.services.ssh-server.id }} sh -c "
                  echo 'TrustedUserCAKeys /config/.ssh/ca_key.pub' >> /config/sshd_config
                  echo '' >> /config/sshd_config
                  echo 'Match LocalPort 2223' >> /config/sshd_config
                  echo '    PasswordAuthentication no' >> /config/sshd_config
                  echo '    AuthorizedPrincipalsFile /config/.ssh/authorized_principals' >> /config/sshd_config
                  echo 'citadel' > /config/.ssh/authorized_principals
                  chmod 644 /config/.ssh/ca_key.pub /config/.ssh/authorized_principals
                  # Restart SSH to apply changes
                  supervisorctl restart openssh-server || killall -HUP sshd || true
                "
            
            - name: Resolve
              run: swift package resolve
            
            - name: Run tests
              run: swift test
              env:
                SWIFT_DETERMINISTIC_HASHING: 1
                SSH_HOST: ssh-server
                SSH_PORT: 2222
                SSH_USERNAME: citadel
                SSH_PASSWORD: hunter2
                SSH_CERT_PORT: 2223
                TEST_CERTS_DIR: test-certificates
